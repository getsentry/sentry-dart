import 'package:meta/meta.dart';

import 'protocol.dart';
import 'sentry_baggage.dart';

@internal
class PropagationContext {
  /// Either represents the incoming `traceId` or the `traceId` generated by the current SDK, if there was no incoming trace.
  SentryId traceId = SentryId.newId();

  /// A span ID that should be used for the `trace` context of various event type, when performance is disabled or when there is no active span.
  /// If this value is undefined on the propagation context, the SDK will generate a random span ID for `trace` contexts and trace propagation.
  final SpanId spanId = SpanId.newId();

  /// The dynamic sampling context.
  SentryBaggage? baggage;

  /// Baggage header to attach to http headers.
  SentryBaggageHeader? toBaggageHeader() =>
      baggage != null ? SentryBaggageHeader.fromBaggage(baggage!) : null;

  /// Sentry trace header to attach to http headers.
  SentryTraceHeader toSentryTrace() => SentryTraceHeader(traceId, spanId);
}
