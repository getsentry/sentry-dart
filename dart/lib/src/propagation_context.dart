import 'package:meta/meta.dart';

import '../sentry.dart';

@internal
class PropagationContext {
  /// Either represents the incoming `traceId` or the `traceId` generated by the current SDK, if there was no incoming trace.
  SentryId traceId = SentryId.newId();

  /// The dynamic sampling context.
  SentryBaggage? baggage;

  /// Random number generated for sampling decisions.
  ///
  /// This value must be generated **once per trace** and reused across all
  /// child spans and transactions that belong to the same trace. It is reset
  /// whenever a new trace is started.
  double? sampleRand;

  /// Baggage header to attach to http headers.
  SentryBaggageHeader? toBaggageHeader() =>
      baggage != null ? SentryBaggageHeader.fromBaggage(baggage!) : null;

  /// Sentry trace header to attach to http headers.
  SentryTraceHeader toSentryTrace() =>
      generateSentryTraceHeader(traceId: traceId);
}
