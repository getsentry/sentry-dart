// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("sentry_android_binding");

/// from: io.sentry.Sentry
class Sentry extends jni.JObject {
  @override
  late final jni.JObjType<Sentry> $type = type;

  Sentry.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $SentryType();
  static final _getCurrentHub =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__getCurrentHub")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.IHub getCurrentHub()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject getCurrentHub() {
    return const jni.JObjectType().fromRef(_getCurrentHub().object);
  }

  static final _cloneMainHub =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__cloneMainHub")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.IHub cloneMainHub()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject cloneMainHub() {
    return const jni.JObjectType().fromRef(_cloneMainHub().object);
  }

  static final _setCurrentHub = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__setCurrentHub")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setCurrentHub(io.sentry.IHub iHub)
  static void setCurrentHub(
    jni.JObject iHub,
  ) {
    return _setCurrentHub(iHub.reference).check();
  }

  static final _isEnabled =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__isEnabled")
          .asFunction<jni.JniResult Function()>();

  /// from: static public boolean isEnabled()
  static bool isEnabled() {
    return _isEnabled().boolean;
  }

  static final _init =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Sentry__init")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void init()
  static void init() {
    return _init().check();
  }

  static final _init1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Sentry__init1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void init(java.lang.String string)
  static void init1(
    jni.JString string,
  ) {
    return _init1(string.reference).check();
  }

  static final _init2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__init2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void init(io.sentry.OptionsContainer optionsContainer, io.sentry.Sentry$OptionsConfiguration optionsConfiguration)
  static void init2<$T extends jni.JObject>(
    jni.JObject optionsContainer,
    jni.JObject optionsConfiguration, {
    required jni.JObjType<$T> T,
  }) {
    return _init2(optionsContainer.reference, optionsConfiguration.reference)
        .check();
  }

  static final _init3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Sentry__init3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void init(io.sentry.OptionsContainer optionsContainer, io.sentry.Sentry$OptionsConfiguration optionsConfiguration, boolean z)
  static void init3<$T extends jni.JObject>(
    jni.JObject optionsContainer,
    jni.JObject optionsConfiguration,
    bool z, {
    required jni.JObjType<$T> T,
  }) {
    return _init3(optionsContainer.reference, optionsConfiguration.reference,
            z ? 1 : 0)
        .check();
  }

  static final _init4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Sentry__init4")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void init(io.sentry.Sentry$OptionsConfiguration optionsConfiguration)
  static void init4(
    jni.JObject optionsConfiguration,
  ) {
    return _init4(optionsConfiguration.reference).check();
  }

  static final _init5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Sentry__init5")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public void init(io.sentry.Sentry$OptionsConfiguration optionsConfiguration, boolean z)
  static void init5(
    jni.JObject optionsConfiguration,
    bool z,
  ) {
    return _init5(optionsConfiguration.reference, z ? 1 : 0).check();
  }

  static final _init6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Sentry__init6")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void init(io.sentry.SentryOptions sentryOptions)
  static void init6(
    jni.JObject sentryOptions,
  ) {
    return _init6(sentryOptions.reference).check();
  }

  static final _close =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Sentry__close")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void close()
  static void close() {
    return _close().check();
  }

  static final _captureEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureEvent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent sentryEvent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureEvent(
    jni.JObject sentryEvent,
  ) {
    return const jni.JObjectType()
        .fromRef(_captureEvent(sentryEvent.reference).object);
  }

  static final _captureEvent1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureEvent1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent sentryEvent, io.sentry.ScopeCallback scopeCallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureEvent1(
    jni.JObject sentryEvent,
    jni.JObject scopeCallback,
  ) {
    return const jni.JObjectType().fromRef(
        _captureEvent1(sentryEvent.reference, scopeCallback.reference).object);
  }

  static final _captureEvent2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureEvent2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent sentryEvent, io.sentry.Hint hint)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureEvent2(
    jni.JObject sentryEvent,
    jni.JObject hint,
  ) {
    return const jni.JObjectType()
        .fromRef(_captureEvent2(sentryEvent.reference, hint.reference).object);
  }

  static final _captureEvent3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureEvent3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent sentryEvent, io.sentry.Hint hint, io.sentry.ScopeCallback scopeCallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureEvent3(
    jni.JObject sentryEvent,
    jni.JObject hint,
    jni.JObject scopeCallback,
  ) {
    return const jni.JObjectType().fromRef(_captureEvent3(
            sentryEvent.reference, hint.reference, scopeCallback.reference)
        .object);
  }

  static final _captureMessage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureMessage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureMessage(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureMessage(
    jni.JString string,
  ) {
    return const jni.JObjectType()
        .fromRef(_captureMessage(string.reference).object);
  }

  static final _captureMessage1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureMessage1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureMessage(java.lang.String string, io.sentry.ScopeCallback scopeCallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureMessage1(
    jni.JString string,
    jni.JObject scopeCallback,
  ) {
    return const jni.JObjectType().fromRef(
        _captureMessage1(string.reference, scopeCallback.reference).object);
  }

  static final _captureMessage2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureMessage2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureMessage(java.lang.String string, io.sentry.SentryLevel sentryLevel)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureMessage2(
    jni.JString string,
    jni.JObject sentryLevel,
  ) {
    return const jni.JObjectType().fromRef(
        _captureMessage2(string.reference, sentryLevel.reference).object);
  }

  static final _captureMessage3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureMessage3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureMessage(java.lang.String string, io.sentry.SentryLevel sentryLevel, io.sentry.ScopeCallback scopeCallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureMessage3(
    jni.JString string,
    jni.JObject sentryLevel,
    jni.JObject scopeCallback,
  ) {
    return const jni.JObjectType().fromRef(_captureMessage3(
            string.reference, sentryLevel.reference, scopeCallback.reference)
        .object);
  }

  static final _captureException = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureException")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureException(java.lang.Throwable throwable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureException(
    jni.JObject throwable,
  ) {
    return const jni.JObjectType()
        .fromRef(_captureException(throwable.reference).object);
  }

  static final _captureException1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureException1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureException(java.lang.Throwable throwable, io.sentry.ScopeCallback scopeCallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureException1(
    jni.JObject throwable,
    jni.JObject scopeCallback,
  ) {
    return const jni.JObjectType().fromRef(
        _captureException1(throwable.reference, scopeCallback.reference)
            .object);
  }

  static final _captureException2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureException2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureException(java.lang.Throwable throwable, io.sentry.Hint hint)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureException2(
    jni.JObject throwable,
    jni.JObject hint,
  ) {
    return const jni.JObjectType().fromRef(
        _captureException2(throwable.reference, hint.reference).object);
  }

  static final _captureException3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureException3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.protocol.SentryId captureException(java.lang.Throwable throwable, io.sentry.Hint hint, io.sentry.ScopeCallback scopeCallback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject captureException3(
    jni.JObject throwable,
    jni.JObject hint,
    jni.JObject scopeCallback,
  ) {
    return const jni.JObjectType().fromRef(_captureException3(
            throwable.reference, hint.reference, scopeCallback.reference)
        .object);
  }

  static final _captureUserFeedback = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__captureUserFeedback")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void captureUserFeedback(io.sentry.UserFeedback userFeedback)
  static void captureUserFeedback(
    jni.JObject userFeedback,
  ) {
    return _captureUserFeedback(userFeedback.reference).check();
  }

  static final _addBreadcrumb = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__addBreadcrumb")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void addBreadcrumb(io.sentry.Breadcrumb breadcrumb, io.sentry.Hint hint)
  static void addBreadcrumb(
    jni.JObject breadcrumb,
    jni.JObject hint,
  ) {
    return _addBreadcrumb(breadcrumb.reference, hint.reference).check();
  }

  static final _addBreadcrumb1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__addBreadcrumb1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void addBreadcrumb(io.sentry.Breadcrumb breadcrumb)
  static void addBreadcrumb1(
    jni.JObject breadcrumb,
  ) {
    return _addBreadcrumb1(breadcrumb.reference).check();
  }

  static final _addBreadcrumb2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__addBreadcrumb2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void addBreadcrumb(java.lang.String string)
  static void addBreadcrumb2(
    jni.JString string,
  ) {
    return _addBreadcrumb2(string.reference).check();
  }

  static final _addBreadcrumb3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__addBreadcrumb3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void addBreadcrumb(java.lang.String string, java.lang.String string1)
  static void addBreadcrumb3(
    jni.JString string,
    jni.JString string1,
  ) {
    return _addBreadcrumb3(string.reference, string1.reference).check();
  }

  static final _setLevel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__setLevel")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setLevel(io.sentry.SentryLevel sentryLevel)
  static void setLevel(
    jni.JObject sentryLevel,
  ) {
    return _setLevel(sentryLevel.reference).check();
  }

  static final _setTransaction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__setTransaction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setTransaction(java.lang.String string)
  static void setTransaction(
    jni.JString string,
  ) {
    return _setTransaction(string.reference).check();
  }

  static final _setUser = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>)>>("Sentry__setUser")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setUser(io.sentry.protocol.User user)
  static void setUser(
    jni.JObject user,
  ) {
    return _setUser(user.reference).check();
  }

  static final _setFingerprint = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__setFingerprint")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setFingerprint(java.util.List list)
  static void setFingerprint(
    jni.JList<jni.JString> list,
  ) {
    return _setFingerprint(list.reference).check();
  }

  static final _clearBreadcrumbs =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__clearBreadcrumbs")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void clearBreadcrumbs()
  static void clearBreadcrumbs() {
    return _clearBreadcrumbs().check();
  }

  static final _setTag = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__setTag")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void setTag(java.lang.String string, java.lang.String string1)
  static void setTag(
    jni.JString string,
    jni.JString string1,
  ) {
    return _setTag(string.reference, string1.reference).check();
  }

  static final _removeTag = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__removeTag")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void removeTag(java.lang.String string)
  static void removeTag(
    jni.JString string,
  ) {
    return _removeTag(string.reference).check();
  }

  static final _setExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__setExtra")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void setExtra(java.lang.String string, java.lang.String string1)
  static void setExtra(
    jni.JString string,
    jni.JString string1,
  ) {
    return _setExtra(string.reference, string1.reference).check();
  }

  static final _removeExtra = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__removeExtra")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void removeExtra(java.lang.String string)
  static void removeExtra(
    jni.JString string,
  ) {
    return _removeExtra(string.reference).check();
  }

  static final _getLastEventId =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__getLastEventId")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.protocol.SentryId getLastEventId()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject getLastEventId() {
    return const jni.JObjectType().fromRef(_getLastEventId().object);
  }

  static final _pushScope =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__pushScope")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void pushScope()
  static void pushScope() {
    return _pushScope().check();
  }

  static final _popScope =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__popScope")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void popScope()
  static void popScope() {
    return _popScope().check();
  }

  static final _withScope = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__withScope")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void withScope(io.sentry.ScopeCallback scopeCallback)
  static void withScope(
    jni.JObject scopeCallback,
  ) {
    return _withScope(scopeCallback.reference).check();
  }

  static final _configureScope = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__configureScope")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void configureScope(io.sentry.ScopeCallback scopeCallback)
  static void configureScope(
    jni.JObject scopeCallback,
  ) {
    return _configureScope(scopeCallback.reference).check();
  }

  static final _bindClient = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__bindClient")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void bindClient(io.sentry.ISentryClient iSentryClient)
  static void bindClient(
    jni.JObject iSentryClient,
  ) {
    return _bindClient(iSentryClient.reference).check();
  }

  static final _flush =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "Sentry__flush")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public void flush(long j)
  static void flush(
    int j,
  ) {
    return _flush(j).check();
  }

  static final _startSession =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__startSession")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void startSession()
  static void startSession() {
    return _startSession().check();
  }

  static final _endSession =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__endSession")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void endSession()
  static void endSession() {
    return _endSession().check();
  }

  static final _startTransaction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__startTransaction")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.ITransaction startTransaction(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JObjectType()
        .fromRef(_startTransaction(string.reference, string1.reference).object);
  }

  static final _startTransaction1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Sentry__startTransaction1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public io.sentry.ITransaction startTransaction(java.lang.String string, java.lang.String string1, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction1(
    jni.JString string,
    jni.JString string1,
    bool z,
  ) {
    return const jni.JObjectType().fromRef(
        _startTransaction1(string.reference, string1.reference, z ? 1 : 0)
            .object);
  }

  static final _startTransaction2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__startTransaction2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.ITransaction startTransaction(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction2(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction2(
            string.reference, string1.reference, string2.reference)
        .object);
  }

  static final _startTransaction3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Sentry__startTransaction3")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public io.sentry.ITransaction startTransaction(java.lang.String string, java.lang.String string1, java.lang.String string2, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction3(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
    bool z,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction3(
            string.reference, string1.reference, string2.reference, z ? 1 : 0)
        .object);
  }

  static final _startTransaction4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Sentry__startTransaction4")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.ITransaction startTransaction(io.sentry.TransactionContext transactionContext)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction4(
    jni.JObject transactionContext,
  ) {
    return const jni.JObjectType()
        .fromRef(_startTransaction4(transactionContext.reference).object);
  }

  static final _startTransaction5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Sentry__startTransaction5")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: static public io.sentry.ITransaction startTransaction(io.sentry.TransactionContext transactionContext, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction5(
    jni.JObject transactionContext,
    bool z,
  ) {
    return const jni.JObjectType().fromRef(
        _startTransaction5(transactionContext.reference, z ? 1 : 0).object);
  }

  static final _startTransaction6 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__startTransaction6")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.ITransaction startTransaction(java.lang.String string, java.lang.String string1, io.sentry.CustomSamplingContext customSamplingContext)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction6(
    jni.JString string,
    jni.JString string1,
    jni.JObject customSamplingContext,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction6(string.reference,
            string1.reference, customSamplingContext.reference)
        .object);
  }

  static final _startTransaction7 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Sentry__startTransaction7")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public io.sentry.ITransaction startTransaction(java.lang.String string, java.lang.String string1, io.sentry.CustomSamplingContext customSamplingContext, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction7(
    jni.JString string,
    jni.JString string1,
    jni.JObject customSamplingContext,
    bool z,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction7(string.reference,
            string1.reference, customSamplingContext.reference, z ? 1 : 0)
        .object);
  }

  static final _startTransaction8 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__startTransaction8")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.ITransaction startTransaction(io.sentry.TransactionContext transactionContext, io.sentry.CustomSamplingContext customSamplingContext)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction8(
    jni.JObject transactionContext,
    jni.JObject customSamplingContext,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction8(
            transactionContext.reference, customSamplingContext.reference)
        .object);
  }

  static final _startTransaction9 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Sentry__startTransaction9")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static public io.sentry.ITransaction startTransaction(io.sentry.TransactionContext transactionContext, io.sentry.CustomSamplingContext customSamplingContext, boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction9(
    jni.JObject transactionContext,
    jni.JObject customSamplingContext,
    bool z,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction9(
            transactionContext.reference,
            customSamplingContext.reference,
            z ? 1 : 0)
        .object);
  }

  static final _startTransaction10 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__startTransaction10")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.ITransaction startTransaction(io.sentry.TransactionContext transactionContext, io.sentry.TransactionOptions transactionOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject startTransaction10(
    jni.JObject transactionContext,
    jni.JObject transactionOptions,
  ) {
    return const jni.JObjectType().fromRef(_startTransaction10(
            transactionContext.reference, transactionOptions.reference)
        .object);
  }

  static final _traceHeaders =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__traceHeaders")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.SentryTraceHeader traceHeaders()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject traceHeaders() {
    return const jni.JObjectType().fromRef(_traceHeaders().object);
  }

  static final _getSpan =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Sentry__getSpan")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.ISpan getSpan()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject getSpan() {
    return const jni.JObjectType().fromRef(_getSpan().object);
  }

  static final _isCrashedLastRun =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__isCrashedLastRun")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.lang.Boolean isCrashedLastRun()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JBoolean isCrashedLastRun() {
    return const jni.JBooleanType().fromRef(_isCrashedLastRun().object);
  }

  static final _reportFullyDisplayed =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__reportFullyDisplayed")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void reportFullyDisplayed()
  static void reportFullyDisplayed() {
    return _reportFullyDisplayed().check();
  }

  static final _reportFullDisplayed =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__reportFullDisplayed")
          .asFunction<jni.JniResult Function()>();

  /// from: static public void reportFullDisplayed()
  static void reportFullDisplayed() {
    return _reportFullDisplayed().check();
  }

  static final _continueTrace = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Sentry__continueTrace")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public io.sentry.TransactionContext continueTrace(java.lang.String string, java.util.List list)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject continueTrace(
    jni.JString string,
    jni.JList<jni.JString> list,
  ) {
    return const jni.JObjectType()
        .fromRef(_continueTrace(string.reference, list.reference).object);
  }

  static final _getTraceparent =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__getTraceparent")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.SentryTraceHeader getTraceparent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject getTraceparent() {
    return const jni.JObjectType().fromRef(_getTraceparent().object);
  }

  static final _getBaggage =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Sentry__getBaggage")
          .asFunction<jni.JniResult Function()>();

  /// from: static public io.sentry.BaggageHeader getBaggage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject getBaggage() {
    return const jni.JObjectType().fromRef(_getBaggage().object);
  }
}

class $SentryType extends jni.JObjType<Sentry> {
  const $SentryType();

  @override
  String get signature => r"Lio/sentry/Sentry;";

  @override
  Sentry fromRef(jni.JObjectPtr ref) => Sentry.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($SentryType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($SentryType) && other is $SentryType;
  }
}
