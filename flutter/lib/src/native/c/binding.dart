// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Sentry Native SDK FFI binding.
class SentryNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SentryNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SentryNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Creates a new options struct.
  /// Can be freed with `sentry_options_free`.
  ffi.Pointer<sentry_options_s> options_new() {
    return _options_new();
  }

  late final _options_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<sentry_options_s> Function()>>(
          'sentry_options_new');
  late final _options_new =
      _options_newPtr.asFunction<ffi.Pointer<sentry_options_s> Function()>();

  /// Deallocates previously allocated sentry options.
  void options_free(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_free(
      opts,
    );
  }

  late final _options_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<sentry_options_s>)>>(
      'sentry_options_free');
  late final _options_free = _options_freePtr
      .asFunction<void Function(ffi.Pointer<sentry_options_s>)>();

  /// Sets the DSN.
  void options_set_dsn(
    ffi.Pointer<sentry_options_s> opts,
    ffi.Pointer<ffi.Char> dsn,
  ) {
    return _options_set_dsn(
      opts,
      dsn,
    );
  }

  late final _options_set_dsnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Pointer<ffi.Char>)>>('sentry_options_set_dsn');
  late final _options_set_dsn = _options_set_dsnPtr.asFunction<
      void Function(ffi.Pointer<sentry_options_s>, ffi.Pointer<ffi.Char>)>();

  /// Gets the DSN.
  ffi.Pointer<ffi.Char> options_get_dsn(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_dsn(
      opts,
    );
  }

  late final _options_get_dsnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sentry_options_s>)>>('sentry_options_get_dsn');
  late final _options_get_dsn = _options_get_dsnPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sentry_options_s>)>();

  /// Sets the release.
  void options_set_release(
    ffi.Pointer<sentry_options_s> opts,
    ffi.Pointer<ffi.Char> release,
  ) {
    return _options_set_release(
      opts,
      release,
    );
  }

  late final _options_set_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Pointer<ffi.Char>)>>('sentry_options_set_release');
  late final _options_set_release = _options_set_releasePtr.asFunction<
      void Function(ffi.Pointer<sentry_options_s>, ffi.Pointer<ffi.Char>)>();

  /// Gets the release.
  ffi.Pointer<ffi.Char> options_get_release(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_release(
      opts,
    );
  }

  late final _options_get_releasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sentry_options_s>)>>('sentry_options_get_release');
  late final _options_get_release = _options_get_releasePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sentry_options_s>)>();

  /// Sets the environment.
  void options_set_environment(
    ffi.Pointer<sentry_options_s> opts,
    ffi.Pointer<ffi.Char> environment,
  ) {
    return _options_set_environment(
      opts,
      environment,
    );
  }

  late final _options_set_environmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Pointer<ffi.Char>)>>('sentry_options_set_environment');
  late final _options_set_environment = _options_set_environmentPtr.asFunction<
      void Function(ffi.Pointer<sentry_options_s>, ffi.Pointer<ffi.Char>)>();

  /// Gets the environment.
  ffi.Pointer<ffi.Char> options_get_environment(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_environment(
      opts,
    );
  }

  late final _options_get_environmentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<sentry_options_s>)>>(
      'sentry_options_get_environment');
  late final _options_get_environment = _options_get_environmentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sentry_options_s>)>();

  /// Sets the dist.
  void options_set_dist(
    ffi.Pointer<sentry_options_s> opts,
    ffi.Pointer<ffi.Char> dist,
  ) {
    return _options_set_dist(
      opts,
      dist,
    );
  }

  late final _options_set_distPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Pointer<ffi.Char>)>>('sentry_options_set_dist');
  late final _options_set_dist = _options_set_distPtr.asFunction<
      void Function(ffi.Pointer<sentry_options_s>, ffi.Pointer<ffi.Char>)>();

  /// Gets the dist.
  ffi.Pointer<ffi.Char> options_get_dist(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_dist(
      opts,
    );
  }

  late final _options_get_distPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<sentry_options_s>)>>('sentry_options_get_dist');
  late final _options_get_dist = _options_get_distPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<sentry_options_s>)>();

  /// Enables or disables debug printing mode.
  void options_set_debug(
    ffi.Pointer<sentry_options_s> opts,
    int debug,
  ) {
    return _options_set_debug(
      opts,
      debug,
    );
  }

  late final _options_set_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Int)>>('sentry_options_set_debug');
  late final _options_set_debug = _options_set_debugPtr
      .asFunction<void Function(ffi.Pointer<sentry_options_s>, int)>();

  /// Returns the current value of the debug flag.
  int options_get_debug(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_debug(
      opts,
    );
  }

  late final _options_get_debugPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sentry_options_s>)>>(
      'sentry_options_get_debug');
  late final _options_get_debug = _options_get_debugPtr
      .asFunction<int Function(ffi.Pointer<sentry_options_s>)>();

  /// Sets the number of breadcrumbs being tracked and attached to events.
  ///
  /// Defaults to 100.
  void options_set_max_breadcrumbs(
    ffi.Pointer<sentry_options_s> opts,
    int max_breadcrumbs,
  ) {
    return _options_set_max_breadcrumbs(
      opts,
      max_breadcrumbs,
    );
  }

  late final _options_set_max_breadcrumbsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Size)>>('sentry_options_set_max_breadcrumbs');
  late final _options_set_max_breadcrumbs = _options_set_max_breadcrumbsPtr
      .asFunction<void Function(ffi.Pointer<sentry_options_s>, int)>();

  /// Gets the number of breadcrumbs being tracked and attached to events.
  int options_get_max_breadcrumbs(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_max_breadcrumbs(
      opts,
    );
  }

  late final _options_get_max_breadcrumbsPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<sentry_options_s>)>>(
      'sentry_options_get_max_breadcrumbs');
  late final _options_get_max_breadcrumbs = _options_get_max_breadcrumbsPtr
      .asFunction<int Function(ffi.Pointer<sentry_options_s>)>();

  /// Enables or disables automatic session tracking.
  ///
  /// Automatic session tracking is enabled by default and is equivalent to calling
  /// `sentry_start_session` after startup.
  /// There can only be one running session, and the current session will always be
  /// closed implicitly by `sentry_close`, when starting a new session with
  /// `sentry_start_session`, or manually by calling `sentry_end_session`.
  void options_set_auto_session_tracking(
    ffi.Pointer<sentry_options_s> opts,
    int val,
  ) {
    return _options_set_auto_session_tracking(
      opts,
      val,
    );
  }

  late final _options_set_auto_session_trackingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<sentry_options_s>,
              ffi.Int)>>('sentry_options_set_auto_session_tracking');
  late final _options_set_auto_session_tracking =
      _options_set_auto_session_trackingPtr
          .asFunction<void Function(ffi.Pointer<sentry_options_s>, int)>();

  /// Returns true if automatic session tracking is enabled.
  int options_get_auto_session_tracking(
    ffi.Pointer<sentry_options_s> opts,
  ) {
    return _options_get_auto_session_tracking(
      opts,
    );
  }

  late final _options_get_auto_session_trackingPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sentry_options_s>)>>(
      'sentry_options_get_auto_session_tracking');
  late final _options_get_auto_session_tracking =
      _options_get_auto_session_trackingPtr
          .asFunction<int Function(ffi.Pointer<sentry_options_s>)>();

  /// Initializes the Sentry SDK with the specified options.
  ///
  /// This takes ownership of the options.  After the options have been set
  /// they cannot be modified any more.
  /// Depending on the configured transport and backend, this function might not be
  /// fully thread-safe.
  /// Returns 0 on success.
  int init(
    ffi.Pointer<sentry_options_s> options,
  ) {
    return _init(
      options,
    );
  }

  late final _initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<sentry_options_s>)>>(
      'sentry_init');
  late final _init =
      _initPtr.asFunction<int Function(ffi.Pointer<sentry_options_s>)>();
}

/// The Sentry Client Options.
///
/// See https://docs.sentry.io/platforms/native/configuration/
class sentry_options_s extends ffi.Opaque {}
