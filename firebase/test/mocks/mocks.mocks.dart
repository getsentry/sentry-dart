// Mocks generated by Mockito 5.4.5 from annotations
// in sentry_firebase/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:firebase_remote_config/firebase_remote_config.dart' as _i7;
import 'package:firebase_remote_config_platform_interface/firebase_remote_config_platform_interface.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:sentry/sentry.dart' as _i2;
import 'package:sentry/src/profiling.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSentryOptions_0 extends _i1.SmartFake implements _i2.SentryOptions {
  _FakeSentryOptions_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSentryId_1 extends _i1.SmartFake implements _i2.SentryId {
  _FakeSentryId_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeScope_2 extends _i1.SmartFake implements _i2.Scope {
  _FakeScope_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHub_3 extends _i1.SmartFake implements _i2.Hub {
  _FakeHub_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeISentrySpan_4 extends _i1.SmartFake implements _i2.ISentrySpan {
  _FakeISentrySpan_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseApp_5 extends _i1.SmartFake implements _i3.FirebaseApp {
  _FakeFirebaseApp_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDateTime_6 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoteConfigSettings_7 extends _i1.SmartFake
    implements _i4.RemoteConfigSettings {
  _FakeRemoteConfigSettings_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRemoteConfigValue_8 extends _i1.SmartFake
    implements _i4.RemoteConfigValue {
  _FakeRemoteConfigValue_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Hub].
///
/// See the documentation for Mockito's code generation for more information.
class MockHub extends _i1.Mock implements _i2.Hub {
  MockHub() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SentryOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeSentryOptions_0(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.SentryOptions);

  @override
  bool get isEnabled =>
      (super.noSuchMethod(Invocation.getter(#isEnabled), returnValue: false)
          as bool);

  @override
  _i2.SentryId get lastEventId => (super.noSuchMethod(
        Invocation.getter(#lastEventId),
        returnValue: _FakeSentryId_1(this, Invocation.getter(#lastEventId)),
      ) as _i2.SentryId);

  @override
  _i2.Scope get scope => (super.noSuchMethod(
        Invocation.getter(#scope),
        returnValue: _FakeScope_2(this, Invocation.getter(#scope)),
      ) as _i2.Scope);

  @override
  // ignore: invalid_use_of_internal_member
  set profilerFactory(_i5.SentryProfilerFactory? value) => super.noSuchMethod(
        Invocation.setter(#profilerFactory, value),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i2.SentryId> captureEvent(
    _i2.SentryEvent? event, {
    dynamic stackTrace,
    _i2.Hint? hint,
    _i2.ScopeCallback? withScope,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureEvent,
          [event],
          {#stackTrace: stackTrace, #hint: hint, #withScope: withScope},
        ),
        returnValue: _i6.Future<_i2.SentryId>.value(
          _FakeSentryId_1(
            this,
            Invocation.method(
              #captureEvent,
              [event],
              {#stackTrace: stackTrace, #hint: hint, #withScope: withScope},
            ),
          ),
        ),
      ) as _i6.Future<_i2.SentryId>);

  @override
  _i6.Future<_i2.SentryId> captureException(
    dynamic throwable, {
    dynamic stackTrace,
    _i2.Hint? hint,
    _i2.ScopeCallback? withScope,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureException,
          [throwable],
          {#stackTrace: stackTrace, #hint: hint, #withScope: withScope},
        ),
        returnValue: _i6.Future<_i2.SentryId>.value(
          _FakeSentryId_1(
            this,
            Invocation.method(
              #captureException,
              [throwable],
              {#stackTrace: stackTrace, #hint: hint, #withScope: withScope},
            ),
          ),
        ),
      ) as _i6.Future<_i2.SentryId>);

  @override
  _i6.Future<_i2.SentryId> captureMessage(
    String? message, {
    _i2.SentryLevel? level,
    String? template,
    List<dynamic>? params,
    _i2.Hint? hint,
    _i2.ScopeCallback? withScope,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureMessage,
          [message],
          {
            #level: level,
            #template: template,
            #params: params,
            #hint: hint,
            #withScope: withScope,
          },
        ),
        returnValue: _i6.Future<_i2.SentryId>.value(
          _FakeSentryId_1(
            this,
            Invocation.method(
              #captureMessage,
              [message],
              {
                #level: level,
                #template: template,
                #params: params,
                #hint: hint,
                #withScope: withScope,
              },
            ),
          ),
        ),
      ) as _i6.Future<_i2.SentryId>);

  @override
  _i6.Future<_i2.SentryId> captureFeedback(
    _i2.SentryFeedback? feedback, {
    _i2.Hint? hint,
    _i2.ScopeCallback? withScope,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureFeedback,
          [feedback],
          {#hint: hint, #withScope: withScope},
        ),
        returnValue: _i6.Future<_i2.SentryId>.value(
          _FakeSentryId_1(
            this,
            Invocation.method(
              #captureFeedback,
              [feedback],
              {#hint: hint, #withScope: withScope},
            ),
          ),
        ),
      ) as _i6.Future<_i2.SentryId>);

  @override
  _i6.Future<void> addBreadcrumb(_i2.Breadcrumb? crumb, {_i2.Hint? hint}) =>
      (super.noSuchMethod(
        Invocation.method(#addBreadcrumb, [crumb], {#hint: hint}),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void bindClient(_i2.SentryClient? client) => super.noSuchMethod(
        Invocation.method(#bindClient, [client]),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Hub clone() => (super.noSuchMethod(
        Invocation.method(#clone, []),
        returnValue: _FakeHub_3(this, Invocation.method(#clone, [])),
      ) as _i2.Hub);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.FutureOr<void> configureScope(_i2.ScopeCallback? callback) =>
      (super.noSuchMethod(Invocation.method(#configureScope, [callback]))
          as _i6.FutureOr<void>);

  @override
  _i2.ISentrySpan startTransaction(
    String? name,
    String? operation, {
    String? description,
    DateTime? startTimestamp,
    bool? bindToScope,
    bool? waitForChildren,
    Duration? autoFinishAfter,
    bool? trimEnd,
    _i2.OnTransactionFinish? onFinish,
    Map<String, dynamic>? customSamplingContext,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startTransaction,
          [name, operation],
          {
            #description: description,
            #startTimestamp: startTimestamp,
            #bindToScope: bindToScope,
            #waitForChildren: waitForChildren,
            #autoFinishAfter: autoFinishAfter,
            #trimEnd: trimEnd,
            #onFinish: onFinish,
            #customSamplingContext: customSamplingContext,
          },
        ),
        returnValue: _FakeISentrySpan_4(
          this,
          Invocation.method(
            #startTransaction,
            [name, operation],
            {
              #description: description,
              #startTimestamp: startTimestamp,
              #bindToScope: bindToScope,
              #waitForChildren: waitForChildren,
              #autoFinishAfter: autoFinishAfter,
              #trimEnd: trimEnd,
              #onFinish: onFinish,
              #customSamplingContext: customSamplingContext,
            },
          ),
        ),
      ) as _i2.ISentrySpan);

  @override
  _i2.ISentrySpan startTransactionWithContext(
    _i2.SentryTransactionContext? transactionContext, {
    Map<String, dynamic>? customSamplingContext,
    DateTime? startTimestamp,
    bool? bindToScope,
    bool? waitForChildren,
    Duration? autoFinishAfter,
    bool? trimEnd,
    _i2.OnTransactionFinish? onFinish,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startTransactionWithContext,
          [transactionContext],
          {
            #customSamplingContext: customSamplingContext,
            #startTimestamp: startTimestamp,
            #bindToScope: bindToScope,
            #waitForChildren: waitForChildren,
            #autoFinishAfter: autoFinishAfter,
            #trimEnd: trimEnd,
            #onFinish: onFinish,
          },
        ),
        returnValue: _FakeISentrySpan_4(
          this,
          Invocation.method(
            #startTransactionWithContext,
            [transactionContext],
            {
              #customSamplingContext: customSamplingContext,
              #startTimestamp: startTimestamp,
              #bindToScope: bindToScope,
              #waitForChildren: waitForChildren,
              #autoFinishAfter: autoFinishAfter,
              #trimEnd: trimEnd,
              #onFinish: onFinish,
            },
          ),
        ),
      ) as _i2.ISentrySpan);

  @override
  _i6.Future<_i2.SentryId> captureTransaction(
    _i2.SentryTransaction? transaction, {
    _i2.SentryTraceContextHeader? traceContext,
    _i2.Hint? hint,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureTransaction,
          [transaction],
          {#traceContext: traceContext, #hint: hint},
        ),
        returnValue: _i6.Future<_i2.SentryId>.value(
          _FakeSentryId_1(
            this,
            Invocation.method(
              #captureTransaction,
              [transaction],
              {#traceContext: traceContext, #hint: hint},
            ),
          ),
        ),
      ) as _i6.Future<_i2.SentryId>);

  @override
  void setSpanContext(
    dynamic throwable,
    _i2.ISentrySpan? span,
    String? transaction,
  ) =>
      super.noSuchMethod(
        Invocation.method(#setSpanContext, [throwable, span, transaction]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FirebaseRemoteConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseRemoteConfig extends _i1.Mock
    implements _i7.FirebaseRemoteConfig {
  MockFirebaseRemoteConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_5(this, Invocation.getter(#app)),
      ) as _i3.FirebaseApp);

  @override
  DateTime get lastFetchTime => (super.noSuchMethod(
        Invocation.getter(#lastFetchTime),
        returnValue: _FakeDateTime_6(
          this,
          Invocation.getter(#lastFetchTime),
        ),
      ) as DateTime);

  @override
  _i4.RemoteConfigFetchStatus get lastFetchStatus => (super.noSuchMethod(
        Invocation.getter(#lastFetchStatus),
        returnValue: _i4.RemoteConfigFetchStatus.noFetchYet,
      ) as _i4.RemoteConfigFetchStatus);

  @override
  _i4.RemoteConfigSettings get settings => (super.noSuchMethod(
        Invocation.getter(#settings),
        returnValue: _FakeRemoteConfigSettings_7(
          this,
          Invocation.getter(#settings),
        ),
      ) as _i4.RemoteConfigSettings);

  @override
  _i6.Stream<_i4.RemoteConfigUpdate> get onConfigUpdated => (super.noSuchMethod(
        Invocation.getter(#onConfigUpdated),
        returnValue: _i6.Stream<_i4.RemoteConfigUpdate>.empty(),
      ) as _i6.Stream<_i4.RemoteConfigUpdate>);

  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i6.Future<bool> activate() => (super.noSuchMethod(
        Invocation.method(#activate, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> ensureInitialized() => (super.noSuchMethod(
        Invocation.method(#ensureInitialized, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> fetch() => (super.noSuchMethod(
        Invocation.method(#fetch, []),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<bool> fetchAndActivate() => (super.noSuchMethod(
        Invocation.method(#fetchAndActivate, []),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  Map<String, _i4.RemoteConfigValue> getAll() => (super.noSuchMethod(
        Invocation.method(#getAll, []),
        returnValue: <String, _i4.RemoteConfigValue>{},
      ) as Map<String, _i4.RemoteConfigValue>);

  @override
  bool getBool(String? key) => (super.noSuchMethod(
        Invocation.method(#getBool, [key]),
        returnValue: false,
      ) as bool);

  @override
  int getInt(String? key) =>
      (super.noSuchMethod(Invocation.method(#getInt, [key]), returnValue: 0)
          as int);

  @override
  double getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(#getDouble, [key]),
        returnValue: 0.0,
      ) as double);

  @override
  String getString(String? key) => (super.noSuchMethod(
        Invocation.method(#getString, [key]),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(#getString, [key]),
        ),
      ) as String);

  @override
  _i4.RemoteConfigValue getValue(String? key) => (super.noSuchMethod(
        Invocation.method(#getValue, [key]),
        returnValue: _FakeRemoteConfigValue_8(
          this,
          Invocation.method(#getValue, [key]),
        ),
      ) as _i4.RemoteConfigValue);

  @override
  _i6.Future<void> setConfigSettings(
    _i4.RemoteConfigSettings? remoteConfigSettings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#setConfigSettings, [remoteConfigSettings]),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setDefaults(Map<String, dynamic>? defaultParameters) =>
      (super.noSuchMethod(
        Invocation.method(#setDefaults, [defaultParameters]),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> setCustomSignals(Map<String, Object?>? customSignals) =>
      (super.noSuchMethod(
        Invocation.method(#setCustomSignals, [customSignals]),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}
